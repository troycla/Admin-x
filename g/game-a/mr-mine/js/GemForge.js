const FORGE_MAX_LEVEL=10,FORGE_LEVEL_STATS=[{},{level:1,load:6,upgradeMoneyCost:1e12,upgradeOilCost:16},{level:2,load:8,upgradeMoneyCost:4e12,upgradeOilCost:200},{level:3,load:12,upgradeMoneyCost:5e13,upgradeOilCost:2e3},{level:4,load:20,upgradeMoneyCost:5e14,upgradeOilCost:4500},{level:5,load:25,upgradeMoneyCost:6e15,upgradeOilCost:6e3},{level:6,load:30,upgradeMoneyCost:1e17,upgradeOilCost:8e3},{level:7,load:35,upgradeMoneyCost:1e18,upgradeOilCost:11e3},{level:8,load:40,upgradeMoneyCost:5e19,upgradeOilCost:15e3},{level:9,load:45,upgradeMoneyCost:1e21,upgradeOilCost:2e4},{level:10,load:50,upgradeMoneyCost:0,upgradeOilCost:0}],CATALYST_CRAFT_RATE=.8;var forgeGemBlueprintsById=[];function getGemBlueprintForGemId(e){return forgeGemBlueprintsById[e]}forgeGemBlueprintsById[RED_FORGED_GEM_INDEX]=getBlueprintById(4,0),forgeGemBlueprintsById[BLUE_FORGED_GEM_INDEX]=getBlueprintById(4,1),forgeGemBlueprintsById[GREEN_FORGED_GEM_INDEX]=getBlueprintById(4,2),forgeGemBlueprintsById[PURPLE_FORGED_GEM_INDEX]=getBlueprintById(4,3),forgeGemBlueprintsById[YELLOW_FORGED_GEM_INDEX]=getBlueprintById(4,4),forgeGemBlueprintsById[FORGE_CATALYST_INDEX]=getBlueprintById(4,5);class QueuedGem{gemResourceId;totalTime;remainingTime;blueprint;forgeWorkloadBase;icon;numCatalystsApplied=0;constructor(e){this.gemResourceId=e,this.blueprint=getGemBlueprintForGemId(e),this.totalTime=this.blueprint.forgeTimeSeconds*STAT.gemSpeedMultiplier(),this.remainingTime=this.totalTime,this.forgeWorkloadBase=this.blueprint.forgeCost,this.icon=this.blueprint.craftedItem.item.getIcon()}catalystAdjustedForgeSpeed(){return 1/Math.pow(.8,this.numCatalystsApplied)}remainingTimeAfterCatalysts(){return this.remainingTime/this.catalystAdjustedForgeSpeed()}forgeWorkload(){return this.forgeWorkloadBase+this.numCatalystsApplied}percentComplete(){return 1-this.remainingTime/this.totalTime}isComplete(){return this.remainingTime<=0}update(e){this.remainingTime-=e*this.catalystAdjustedForgeSpeed()}grant(){this.blueprint.craftedItem.item.onForged(),newNews(_("{0} crafting complete",worldResources[this.gemResourceId].name))}applyCatalyst(){numforgeCatalystsOwned()>0&&(worldResources[FORGE_CATALYST_INDEX].numOwned--,this.numCatalystsApplied++)}}class GemForgeQueue{queuedGems=[];constructor(){}updateQueuedGems(e){this.forEachQueuedGem(((t,r)=>{t.update(e)})),this.forEachQueuedGem(((e,t)=>{e.isComplete()&&(e.grant(),this.dequeuFinishedGems(t))}))}dequeuFinishedGems(e){this.queuedGems.splice(e,1)}addGemToQueue(e){var t=new QueuedGem(e);this.queuedGems.push(t)}forEachQueuedGem(e){this.queuedGems.forEach(e)}currentLoad(){var e=0;return this.forEachQueuedGem(((t,r)=>{e+=t.forgeWorkload()})),e}}class GemForge{forgeQueue=null;constructor(){this.forgeQueue=new GemForgeQueue}set queueSaveValue(e){this.forgeQueue.queuedGems=[];for(var t=""===e?[]:e.split("!"),r=0;r<t.length;r+=3){var u=parseInt(t[r]),o=parseInt(t[r+1]),s=parseInt(t[r+2]),a=new QueuedGem(u);a.remainingTime=o,a.numCatalystsApplied=s,this.forgeQueue.queuedGems.push(a)}}get queueSaveValue(){let e=[];for(var t=0;t<this.forgeQueue.queuedGems.length;t++)e.push(this.forgeQueue.queuedGems[t].gemResourceId),e.push(this.forgeQueue.queuedGems[t].remainingTime),e.push(this.forgeQueue.queuedGems[t].numCatalystsApplied);return e.join("!")}isAtMaxLevel(){return gemForgeStructure.level>=10}levelUpMoneyCost(){return FORGE_LEVEL_STATS[gemForgeStructure.level].upgradeMoneyCost}levelUpOilCost(){return FORGE_LEVEL_STATS[gemForgeStructure.level].upgradeOilCost}levelUpWorkloadIncrease(){return gemForgeStructure.isMaxLevel()?0:FORGE_LEVEL_STATS[gemForgeStructure.level+1].load-this.currentMaxLoad()}update(e){this.forgeQueue.updateQueuedGems(e)}currentMaxLoad(){return FORGE_LEVEL_STATS[gemForgeStructure.level].load}currentLoad(){return this.forgeQueue.currentLoad()}potentialAdditionalLoad(){return this.currentMaxLoad()-this.currentLoad()}canApplyCatalyst(){return this.potentialAdditionalLoad()>0&&numforgeCatalystsOwned()>0}canQueueGem(e){var t=getGemBlueprintForGemId(e);return t.forgeCost<=this.potentialAdditionalLoad()&&canCraftBlueprint(t.category,t.id)}addGemToQueue(e){if(this.canQueueGem(e)){var t=getGemBlueprintForGemId(e);craftBlueprint(t.category,t.id)&&this.forgeQueue.addGemToQueue(e)}}}var GemForger=new GemForge;