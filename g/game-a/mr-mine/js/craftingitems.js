class CraftingItem{id;constructor(){}getQuantityOwned(){}hasQuantity(){}canCraft(){}getNotCraftableReason(){}spendQuantity(){}grantQuantity(){}upgradeToLevel(){}getCurrentLevel(){}getMaxLevel(){}getIcon(){}getName(){}getDescription(){}getFormattedQuantity(){}}class BackpackCraftingItem extends CraftingItem{id;constructor(t){super(),this.id=t}getQuantityOwned(){return getQuantityOfItemInBackpack(this.id)}hasQuantity(t){return t<=getQuantityOfItemInBackpack(this.id,t)}percentageOfQuanity(t){return Math.min(1,t/getQuantityOfItemInBackpack(this.id,t))}canCraft(){return!0}spendQuantity(t){return!!this.hasQuantity(t)&&(removeItemFromBackpackById(this.id,t),!0)}grantQuantity(t){addItemToBackpack(this.id,t)}getIcon(){return getItemById(this.id).icon}getName(){return _(getItemById(this.id).name)}getDescription(){var t=getItemById(this.id);return t&&t.description?t.description:""}getFormattedQuantity(t){return shortenNum(t)}}class MineralCraftingItem extends CraftingItem{id;constructor(t){super(),this.id=t}getQuantityOwned(){return worldResources[this.id].numOwned}hasQuantity(t){return t<=this.getQuantityOwned()}percentageOfQuanity(t){return Math.min(1,this.getQuantityOwned()/t)}canCraft(){return!0}spendQuantity(t){return!!this.hasQuantity(t)&&(worldResources[this.id].numOwned-=t,!0)}grantQuantity(t){worldResources[this.id].numOwned+=t}getIcon(){if(worldResources[this.id].isIsotope){var t=worldResources[this.id].isotopeIndex||0;return this.id-t>highestIsotopeUnlocked?worldResources[this.id].largeIconHidden:worldResources[this.id].largeIcon}return this.id>highestOreUnlocked?worldResources[this.id].largeIconHidden:worldResources[this.id].largeIcon}getName(){return getLockedMineralName(this.id)}getDescription(){if(!worldResources[this.id].isIsotope&&this.id>highestOreUnlocked&&worldResources[this.id].sellValue.greaterThan(0))return"<br><br>"+_("Found around depth {0}km",beautifynum(5*Math.ceil(getDepthMineralIsFoundAt(this.id)/5)));if(worldResources[this.id].isIsotope){var t="";return FUEL_ROD_TYPES.forEach((e=>{reactorComponents[e].rewardOutput.forEach((r=>{reactorComponents[e].totalEnergyOutput<0&&r.item.id==this.id&&(t="<br><br>"+_("Rewarded from {0} in the Reactor",reactorComponents[e].name))}))})),t}return""}getFormattedQuantity(t){return shortenNum(t)}}class DrillCraftingItem extends CraftingItem{id;constructor(t){super(),this.id=t}getQuantityOwned(){return getDrillEquipById(this.id).isCrafted?1:0}hasQuantity(t){return t<=this.getQuantityOwned()}percentageOfQuanity(t){return Math.min(1,this.getQuantityOwned()/t)}canCraft(){return!this.hasQuantity(1)}getNotCraftableReason(){return _("You already own this drill part")}spendQuantity(t){return!1}grantQuantity(t){getDrillEquipById(this.id).craftAndEquip()}getIcon(){return getDrillEquipById(this.id).icon}getName(){return getDrillEquipById(this.id).translatedName}getCostRelativeToIncrease(){var t=getDrillEquipById(this.id).wattagePercentIncrease(),e=getDrillBlueprintByEquipId(this.id).price;return doBigNumberDecimalMultiplication(e,t/100)}getDescription(){var t=getDrillEquipById(this.id),e=t.level,r=t.baseWatts,i=t.wattMultiplier,n=t.capacity,a="",s=parseFloat(t.wattagePercentIncrease().toFixed(2));return 0!=s&&(a+=_("Drill speed {0}%",(s>=0?"+":"")+beautifynum(s))+" <br> "),e&&(a+=_("Level: {0}",e)+" <br> "),r&&(a+=_("Base Watts: {0}",beautifynum(r))+" <br> "),i>1&&(a+=_("Total Watts Multiplier: {0}",beautifynum(i))+" <br> "),n&&(a+=_("Capacity: {0}",beautifynum(n))),a}getFormattedQuantity(t){return shortenNum(t)}}class WeaponCraftingItem extends CraftingItem{id;constructor(t){super(),this.id=t}getNotCraftableReason(){return _("You already own this weapon")}getQuantityOwned(){return battleInventory[this.id].length>0?1:0}hasQuantity(t){return t<=this.getQuantityOwned()}percentageOfQuanity(t){return Math.min(1,this.getQuantityOwned()/t)}canCraft(){return!0}spendQuantity(t){return!!this.hasQuantity(t)&&(battleInventory[this.id]=[],!0)}grantQuantity(t){getEquip(this.id)}upgradeToLevel(t){var e=getInventoryWeaponIndexById(this.id);if(e<0)throw new"Error: Cannot upgrade a weapon that isn't owned.";battleInventory[e][4]=t}getCurrentLevel(){var t=getInventoryWeaponIndexById(this.id);return t<0?-1:battleInventory[t][4]}getMaxLevel(){return weaponStats[this.id].maxLevel+1}isAtMaxLevel(){return this.getCurrentLevel()+1>=this.getMaxLevel()}getIcon(){return weaponStats[this.id].icon}getName(){return _(weaponStats[this.id].translatedName)}getDps(){var t=this.getCurrentLevel(),e=getEquipStats(this.id,t);return e.attack/(e.speed/1e3)}getAttack(){var t=this.getCurrentLevel();return getEquipStats(this.id,t).attack}getCooldown(){var t=this.getCurrentLevel();return getEquipStats(this.id,t).speed}getDescription(){var t="",e=this.getCurrentLevel(),r=getEquipStats(this.id,e),i=r.attack,n=r.speed;if(this.getCurrentLevel()+1>=this.getMaxLevel())t+=_("MAX LEVEL")+" <br> ",t+=_("Level: {0}",e+1)+" <br> ",t+=_("Attack: {0}",beautifynum(i))+" <br> ",t+=_("Cooldown: {0}ms",beautifynum(n))+" <br> ";else{var a=this.getCurrentLevel()+1,s=getEquipStats(this.id,a),u=s.attack,d=s.speed;a&&(t+=_("Level: {0}",e+1)+String.fromCharCode(8201)+String.fromCharCode(8594)+String.fromCharCode(8201)+(a+1)+" <br> "),u&&(t+=_("Attack: {0}",beautifynum(i))+String.fromCharCode(8201)+String.fromCharCode(8594)+String.fromCharCode(8201)+beautifynum(u)+" <br> "),d&&(t+=_("Cooldown: {0}ms",beautifynum(n))+String.fromCharCode(8201)+String.fromCharCode(8594)+String.fromCharCode(8201)+beautifynum(d)+"ms <br> ")}return t}getFormattedQuantity(t){return shortenNum(t)}}class GemCraftingItem extends MineralCraftingItem{grantQuantity(t){}onForged(){worldResources[this.id].numOwned++}getFormattedQuantity(t){return shortenNum(t)}}class MoneyCraftingItem extends CraftingItem{constructor(){super()}getNotCraftableReason(){return _("You don't have enough money")}getQuantityOwned(){return money}hasQuantity(t){return money.greaterThanOrEqualTo(t)}percentageOfQuanity(t){return Math.min(1,money.divide(t))}canCraft(){return!0}spendQuantity(t){return!!this.hasQuantity(t)&&(subtractMoney(t),!0)}grantQuantity(t){addMoney(t)}getIcon(){return moneyicon}getName(){return _("Money")}getDescription(){return""}getFormattedQuantity(t){return"$"+shortenNum(t)}}class ReactorCraftingItem extends CraftingItem{id;constructor(t){super(),this.id=t}getQuantityOwned(){return reactorComponents[this.id].numOwned}hasQuantity(t){return t<=this.getQuantityOwned()&&t<=reactor.numOfTypeInInventory(this.id)}percentageOfQuanity(t){return Math.min(1,this.getQuantityOwned()/t)}canCraft(){return!0}spendQuantity(t){return!!this.hasQuantity(t)&&(reactorComponents[this.id].numOwned-=t,!0)}grantQuantity(t){reactorComponents[this.id].numOwned+=t}getIcon(){return reactorComponents[this.id].craftIcon}getName(){return _(reactorComponents[this.id].name)}getDescription(){return reactorComponents[this.id].craftDescription}getFormattedQuantity(t){return shortenNum(t)}}class StructureCraftingItem extends CraftingItem{id;constructor(t){super(),this.id=t}getNotCraftableReason(){return _("Not enough materials")}getQuantityOwned(){return 1}hasQuantity(t){return t<=this.getQuantityOwned()}percentageOfQuanity(t){return Math.min(1,this.getQuantityOwned()/t)}canCraft(){return!0}spendQuantity(t){return!1}grantQuantity(t){return!1}upgradeToLevel(t){this.hasQuantity(1)&&(structures[this.id].level=t)}getCurrentLevel(){return structures[this.id].level}getMaxLevel(){return structures[this.id].maxLevel}isAtMaxLevel(){return this.getCurrentLevel()>=this.getMaxLevel()}getIcon(){return structures[this.id].icon}getName(){return _(structures[this.id].translatedName)}getDescription(){var t=this.getCurrentLevel(),e="";""!=(e=structures[this.id].structureDescription[t]?structures[this.id].structureDescription[t]:structures[this.id].structureDescription[0])&&(e+=" <br> ");let r=String.fromCharCode(8201)+String.fromCharCode(8594)+String.fromCharCode(8201);if(this.getCurrentLevel()>=this.getMaxLevel())e+=_("MAX LEVEL")+" <br> ",e+=_("Level: {0}",t)+" <br> ",structures[this.id].leveledStats.forEach(((t,r)=>{t.name&&t.perLvlValue&&(e+=t.name+": "+structures[this.id].statValueForCurrentLevel(r))}));else{var i=this.getCurrentLevel()+1;0==this.getCurrentLevel()?(e+=_("Level: {0}",i)+" <br> ",structures[this.id].leveledStats.forEach(((t,r)=>{t.name&&t.perLvlValue&&(e+=t.name+": "+structures[this.id].statValueForNextLevel(r))}))):i&&(e+=_("Level: {0}",t)+r+i+" <br> ",structures[this.id].leveledStats.forEach(((t,i)=>{t.name&&t.perLvlValue&&(e+=t.name+": "+structures[this.id].statValueForCurrentLevel(i)+r+structures[this.id].statValueForNextLevel(i)+" <br> ")})))}return e}getFormattedQuantity(t){return shortenNum(t)}}class ReactorLevelCraftingItem extends StructureCraftingItem{upgradeToLevel(t){super.upgradeToLevel(t),craftBlueprint(5,0,reactorStructure.level),reactor.grid.isGridDirty=!0,reactor.learnReactorBlueprintsForLevel(),newNews(_("New components are available in your reactor"),!0)}}class DroneCraftingItem extends CraftingItem{id;constructor(t){super(),this.id=t}getNotCraftableReason(){return _("Not enough materials")}getQuantityOwned(){return 1}hasQuantity(t){return t<=this.getQuantityOwned()}percentageOfQuanity(t){return Math.min(1,this.getQuantityOwned()/t)}canCraft(){return!0}spendQuantity(t){return!1}grantQuantity(t){return!1}upgradeToLevel(t){this.hasQuantity(1)&&(drones[this.id].level=t)}getCurrentLevel(){return parseInt(drones[this.id].level)}getMaxLevel(){return drones[this.id].maxLevel}isAtMaxLevel(){return this.getCurrentLevel(this.statName)>=this.getMaxLevel(this.statName)}getIcon(){return drones[this.id].icon}getName(){return _(drones[this.id].translatedName)}getDescription(){var t=drones[this.id].description;""!=t&&(t+=" <br> "),(e=this.getCurrentLevel())>=this.getMaxLevel()?t+=_("MAX LEVEL")+" <br> ":t+=_("Level: {0}",e)+" <br> ";var e=this.getCurrentLevel(),r=drones[this.id].totalHealthLevels[e],i=drones[this.id].totalFuel,n=drones[this.id].fuelUseLevels[e],a=drones[this.id].speedMultiplierLevels[e],s=drones[this.id].rewardCapacityLevels[e];return t+=_("Health: {0}",r)+" <br> ",t+=_("Total Fuel: {0}",i)+" <br> ",t+=_("Fuel Use: {0}",n)+" <br> ",t+=_("Speed Multiplier: {0}",a)+" <br> ",t+=_("Capacity: {0}",s)+" <br> "}getFormattedQuantity(t){return shortenNum(t)}}class DroneUpgradeCraftingItem extends DroneCraftingItem{getDescription(){var t=drones[this.id].description,e=this.getCurrentLevel(),r=(e=this.getCurrentLevel(),drones[this.id].totalHealthLevels[e]),i=drones[this.id].fuelUseLevels[e],n=drones[this.id].speedMultiplierLevels[e],a=drones[this.id].rewardCapacityLevels[e];if(""!=t&&(t+=" <br> "),this.getCurrentLevel()>=this.getMaxLevel())t+=_("MAX LEVEL")+" <br> ",t+=_("Level: {0}",e)+" <br> ",t+=_("Health: {0}",r)+" <br> ",t+=_("Fuel Use: {0}",i)+" <br> ",t+=_("Speed Multiplier: {0}",n)+" <br> ",t+=_("Capacity: {0}",a);else{var s=this.getCurrentLevel()+1,u=drones[this.id].totalHealthLevels[s],d=drones[this.id].fuelUseLevels[s],o=drones[this.id].speedMultiplierLevels[s],h=drones[this.id].rewardCapacityLevels[s],l=String.fromCharCode(8201)+String.fromCharCode(8594)+String.fromCharCode(8201);t+=_("Level: {0}",e)+l+s+" <br> ",t+=_("Health: {0}",r)+l+u+this.getPercentageUpgrade(r,u)+" <br> ",t+=_("Fuel Use: {0}",i)+l+d+this.getPercentageUpgrade(i,d)+" <br> ",t+=_("Speed Multiplier: {0}",n)+l+o+this.getPercentageUpgrade(n,o)+" <br> ",t+=_("Capacity: {0}",a)+l+h+this.getPercentageUpgrade(a,h)+" <br> "}return t}getPercentageUpgrade(t,e){if(0==t)return"";var r=(100*(e/t-1)).toFixed(1);return 0!=r?"("+r+"%)":""}}class minerCraftingItem extends CraftingItem{id;constructor(t){super(),this.id=t}getQuantityOwned(){return worlds[this.id].workersHired}canCraft(){return worlds[this.id].workersHired<10}upgradeToLevel(t){worlds[this.id].workersHired=t}getCurrentLevel(){return worlds[this.id].workersHired}isAtMaxLevel(){return 10==worlds[this.id].workersHired}getIcon(){let t=[minerImages,lunarMinerImages,titanMinerImages][this.id][0];return getImageFromMergedImages("minerLevel_"+this.id+"_0",icontemplate,{x:0,y:0,width:50,height:50},{x:0,y:0,width:50,height:50},t,{x:0,y:0,width:32,height:48},{x:1,y:1,width:48,height:48})}}class minerLevelCraftingItem extends CraftingItem{id;constructor(t){super(),this.id=t}canCraft(){return worlds[this.id].workerLevel<this.getMaxLevel()&&worlds[this.id].workersHired>=10}getCurrentLevel(){return worlds[this.id].workerLevel}getMaxLevel(){return 10}getCurrentLevel(){return worlds[this.id].workerLevel}upgradeToLevel(t){worlds[this.id].workerLevel=t}isAtMaxLevel(){return this.getCurrentLevel()>=this.getMaxLevel()}getIcon(t){t=Math.min(this.getMaxLevel(),t);let e=[minerImages,lunarMinerImages,titanMinerImages][this.id][t];return getImageFromMergedImages("minerLevel_"+this.id+"_"+t,icontemplate,{x:0,y:0,width:50,height:50},{x:0,y:0,width:50,height:50},e,{x:0,y:0,width:32,height:48},{x:1,y:1,width:48,height:48})}}