var droneMovement={ground:0,air:1,water:2};class BaseDrone{id;icon;spritesheet;level;maxLevel;totalHealth;totalFuel;fuelUsePerSecond;speedMultiplier;rewardCapacity;visionDistance;movementType;damagePerSecond;resistances=[];weaknesses=[];onEnterNode(e){}onExitNode(e){}specialUpdate(e){}}class ActiveDrone extends BaseDrone{baseDroneId;caveSystem;nodePath=[];lastReachedNodeIndex=0;progressToNextNode=0;isAlive=!0;isMovingForward=!0;isFinished=!1;isTakingDamage=!1;isHealing=!1;isActing=!1;currentHealth;speed;currentFuel;inventory=[];claimedRewards=[];waitAtNodeTime=0;totalWaitTime=0;logStatus=!1;totalTimeEstimate;elapsedTime=0;flickerFrames={};status="";hasInitializedValues=!1;constructor(e,t,i,s=-1){super(),isSimulating||this.setStatus(_("Moving through chamber")),Object.assign(this,e),s>=0&&(this.level=s),this.totalHealth=this.totalHealthLevels[this.level],this.fuelUsePerSecond=this.fuelUseLevels[this.level],this.speedMultiplier=this.speedMultiplierLevels[this.level]*STAT.droneSpeedMultiplier(),this.rewardCapacity=this.rewardCapacityLevels[this.level],this.caveSystem=t,this.baseDroneId=e.id,this.nodePath=i,this.currentHealth=this.totalHealth,this.speed=this.speedMultiplier/TRAVEL_TIME_BETWEEN_NODES,this.totalFuel=Math.floor(this.totalFuel*STAT.startingFuelMultiplier()),this.currentFuel=this.totalFuel,this.totalTimeEstimate=this.getEstimatedTimeRemaining();var a=rand(0,4);this.createDroneFlickerFrame("acting","#FFFFFF",a),this.createDroneFlickerFrame("damage","#FF0000",a+1),this.createDroneFlickerFrame("healing","#5EB65D",a+2),this.revealNearbyNodes(this.nodePath[0],this.visionDistance),this.startCollectingRewardsOnNode(this.nodePath[0]),this.onEnterNode(this.nodePath[0]),this.nodePath[0].onDroneEnter(this)}update(e){if(0==this.elapsedTime&&this.logStatus&&console.log("Drone "+this.id+" is starting path of length "+this.nodePath.length),this.elapsedTime+=e,this.isTakingDamage=!1,this.isHealing=!1,!this.isFinished&&this.isAlive){if(this.currentFuel-=this.fuelUsePerSecond*e,this.waitAtNodeTime>0)this.waitAtNodeTime-=e,this.waitAtNodeTime>0?(this.nodePath[this.lastReachedNodeIndex].update(e,this),this.logStatus&&console.log("Drone "+this.id+" is waiting at node "+this.nodePath[this.lastReachedNodeIndex].id)):(this.totalWaitTime=0,this.isActing=!1,this.nodePath[this.lastReachedNodeIndex].onDroneExit(this),this.onExitNode(this.nodePath[this.lastReachedNodeIndex]),this.pickUpClaimedRewards(),0!=this.lastReachedNodeIndex||this.isMovingForward||this.handlePathCompletion());else{if(1==this.nodePath.length)return this.handlePathCompletion(),!0;this.move(e),this.updateCurrentNode()?(this.nodePath[this.lastReachedNodeIndex].onDroneEnter(this),this.onEnterNode(this.nodePath[this.lastReachedNodeIndex]),0==this.lastReachedNodeIndex||(this.isMovingForward||this.lastReachedNodeIndex==this.nodePath.length-1)&&this.revealNearbyNodes(this.nodePath[this.lastReachedNodeIndex],this.visionDistance)):this.isMovingForward?this.logStatus&&console.log("Drone "+this.id+" is moving to node "+this.nodePath[this.lastReachedNodeIndex+1].id):this.logStatus&&console.log("Drone "+this.id+" is moving to node "+this.nodePath[this.lastReachedNodeIndex-1].id)}(this.currentHealth<=0||this.currentFuel<=0)&&this.die()}this.specialUpdate(e)}move(e){this.progressToNextNode+=this.speed*e}updateCurrentNode(){return this.progressToNextNode>=1?(isSimulating||this.setStatus(_("Moving through chamber")),this.progressToNextNode=0,this.isMovingForward?this.nodePath.length>1&&(this.lastReachedNodeIndex++,this.lastReachedNodeIndex==this.nodePath.length-1&&(this.isMovingForward=!1)):this.lastReachedNodeIndex--,this.startCollectingRewardsOnNode(this.nodePath[this.lastReachedNodeIndex]),!0):(isSimulating||this.setStatus(_("Moving through tunnel")),!1)}nextNodeIndex(){return this.isMovingForward?this.lastReachedNodeIndex+1:Math.max(0,this.lastReachedNodeIndex-1)}idOfFinalNodeInPath(){return this.nodePath[this.nodePath.length-1].id}pickUpClaimedRewards(){for(var e=this.claimedRewards.length-1;e>=0;--e){var t=this.caveSystem.rewards[this.claimedRewards[e]];t.isClaimed=!1,t.activateOnPickup?(t.pickUp(this),t.grant(this)):this.isInventoryFull()||(this.inventory.push(this.claimedRewards[e]),t.pickUp()),this.claimedRewards.splice(e,1)}}collectRewardsFromNode(){var e=this.nodePath[this.lastReachedNodeIndex],t=this.caveSystem.getIndexOfRewardsOnNode(e);for(var i in t){var s=this.caveSystem.rewards[t[i]];s.activateOnPickup?(s.pickUp(this),s.grant(this)):this.isInventoryFull()||(this.inventory.push(t[i]),this.logStatus&&console.log("Drone "+this.id+" collected a reward from node "+e.id),s.pickUp())}}takeDamage(e,t){this.resistances.includes(t)?e/=2:this.weaknesses.includes(t)&&(e*=2),this.currentHealth-=e,e>0&&(this.isTakingDamage=!0),this.currentHealth<0&&(this.currentHealth=0)}heal(e){e>0&&(this.isHealing=!0,this.currentHealth=Math.min(this.totalHealth,this.currentHealth+e))}wait(e){e+=1,this.waitAtNodeTime<0&&(this.waitAtNodeTime=0),e/=this.speedMultiplier,this.waitAtNodeTime+=e,this.totalWaitTime+=e}resume(){this.waitAtNodeTime=0}claimRewardsOnNode(){if(!this.isInventoryFull()){var e=this.nodePath[this.lastReachedNodeIndex],t=this.caveSystem.getIndexOfRewardsOnNode(e);for(var i in t){var s=this.caveSystem.rewards[t[i]];s.activateOnPickup?(s.pickUp(this),s.grant(this)):this.isInventoryFull()||(this.inventory.push(t[i]),this.logStatus&&console.log("Drone "+this.id+" collected a reward from node "+e.id),s.pickUp())}}return!1}claimReward(e){var t=this.caveSystem.rewards[e];t.distanceFromNode=0,t.isClaimed=!0,this.claimedRewards.push(e)}releaseReward(e){var t=this.claimedRewards[e];this.caveSystem.rewards[t].isClaimed=!1,this.claimedRewards.splice(e,1)}startCollectingRewardsOnNode(e){for(var t=this.caveSystem.getIndexOfRewardsOnNode(e),i=!1,s=0;s<t.length;++s){var a=this.caveSystem.rewards[t[s]];(a.activateOnPickup||this.claimedRewards.length<this.rewardCapacity-this.inventory.length)&&a.canBeCollected(this)&&(this.isActing=!0,this.claimReward(t[s]),this.wait(a.collectionTime),isSimulating||this.setStatus(_("Collecting treasure")),i=!0)}return i}getEstimatedTimeRemaining(){for(var e=Math.max(0,this.waitAtNodeTime)+this.progressToNextNode*this.speedMultiplier,t=1;t<this.nodePath.length;++t)e+=(this.isMovingForward&&t>this.lastReachedNodeIndex&&t!=this.nodePath.length-1?2:!this.isMovingForward&&t>=this.lastReachedNodeIndex?0:1)*(this.speedMultiplier+this.nodePath[t].getDurationForDrone(this));return e}handlePathCompletion(){for(var e in this.inventory)try{treasureStorage.store(this.caveSystem.rewards[this.inventory[e]])}catch(e){console.warn(e)}this.isInventoryFull()&&this.currentHealth/this.totalHealth<=.05&&questManager.getQuest(52).markComplete(),this.isFinished=!0,this.inventory=[],console.log("adding fuel");let t=Math.floor(Math.min(this.currentFuel,drones[this.baseDroneId].totalFuel));this.caveSystem.addFuel(t),this.logStatus&&console.log("Drone "+this.id+" completed its path"),newNews(_("A drone at {0}km has returned!",this.caveSystem.kmDepth)),mutebuttons||droneReturnAudio.play(),this.caveSystem.isFinished()&&(numCavesCompleted++,trackEvent_CompletedCave(this.caveSystem.kmDepth),this.caveSystem.collapse(),this.caveSystem.caveTreeDepth>=15&&questManager.getQuest(51).markComplete())}die(){this.isAlive=!1;for(var e=this.claimedRewards.length-1;e>=0;--e)this.releaseReward(e);for(var e in this.inventory)this.caveSystem.rewards[this.inventory[e]].drop(this.nodePath[this.lastReachedNodeIndex]);var t=this.caveSystem.getDronesOnNode(this.nodePath[this.lastReachedNodeIndex]);for(e=0;e<t.length;++e)t[e].waitAtNodeTime>0&&t[e].startCollectingRewardsOnNode(this.nodePath[this.lastReachedNodeIndex]);this.inventory=[],this.logStatus&&console.log("Drone "+this.id+" died"),newNews(_("A drone at {0}km has died",this.caveSystem.kmDepth))}isInventoryFull(){return this.inventory.length>=this.rewardCapacity}revealNearbyNodes(e,t){if(e.isRevealed=!0,t>0)for(var i in e.children)this.revealNearbyNodes(e.children[i],t-1)}createDroneFlickerFrame(e,t,i=-1){if(!isSimulating){var s=document.createElement("canvas"),a=s.getContext("2d"),n=this.spritesheet.width/4;i<0&&(i=rand(0,3)),i%=4,s.width=n,s.height=n,a.drawImage(this.spritesheet,n*i,0,n,this.spritesheet.height,0,0,s.width,s.height),a.globalCompositeOperation="source-atop",a.globalAlpha=.3,a.fillStyle=t,a.fillRect(0,0,s.width,s.height);var r=new Image;r.src=s.toDataURL(),this.flickerFrames[e]={image:r,frameIndex:i}}}setStatus(e){this.status=e}}function runDroneTest(e,t=null,i=1){t||(t=activeLayers.caveWindow?activeLayers.caveWindow.caveSystem:new CaveSystem(25,7));var s=new ActiveDrone(e,t,t.getRandomPath());for(s.logStatus=!0;s.isAlive&&!s.isFinished;)s.update(i)}var basicDrone,currentDroneLevels={get serializedSaveValue(){var e=[];for(var t in drones)e[t]=drones[t].level;return e.join("!")},set serializedSaveValue(e){var t=e.split("!");for(var i in drones)t[i]?drones[i].level=parseInt(t[i]):console.warn("WARNING: Failed to load level for drone with ID "+drones[i].id)}},drones=[];(basicDrone=new BaseDrone).id=0,basicDrone.icon=groundDrone1_icon,basicDrone.translatedName=_("BASIC DRONE"),basicDrone.description=_("A basic drone."),basicDrone.movementType=droneMovement.ground,basicDrone.spritesheet=groundDrone1_spritesheet,basicDrone.maxLevel=5,basicDrone.totalFuel=100,basicDrone.level=0,basicDrone.totalHealthLevels=[200,230,260,290,320,350],basicDrone.fuelUseLevels=[.08,.07,.06,.05,.05,.05],basicDrone.speedMultiplierLevels=[1,1.3,1.6,1.9,2.2,2.5],basicDrone.rewardCapacityLevels=[3,3,4,4,5,5],basicDrone.visionDistance=1,basicDrone.damagePerSecond=1,drones[basicDrone.id]=basicDrone;var magneticDrone=new BaseDrone;magneticDrone.id=1,magneticDrone.icon=groundDrone2_icon,magneticDrone.translatedName=_("MAGNETIC DRONE"),magneticDrone.description=_("Pulls rewards from branching paths on to its location."),magneticDrone.movementType=droneMovement.ground,magneticDrone.spritesheet=groundDrone2_spritesheet,magneticDrone.maxLevel=5,magneticDrone.totalFuel=200,magneticDrone.level=0,magneticDrone.totalHealthLevels=[350,400,450,500,550,600],magneticDrone.fuelUseLevels=[.3,.27,.24,.21,.18,.15],magneticDrone.speedMultiplierLevels=[2.5,2.7,2.9,3.1,3.3,3.5],magneticDrone.rewardCapacityLevels=[0,0,0,0,0,0],magneticDrone.visionDistance=1,magneticDrone.damagePerSecond=1,magneticDrone.specialUpdate=function(e){if(this.claimedRewards.length>0)for(var t in this.claimedRewards)this.caveSystem.rewards[this.claimedRewards[t]].activateOnPickup||(this.caveSystem.rewards[this.claimedRewards[t]].distanceFromNode=this.waitAtNodeTime/this.totalWaitTime)},magneticDrone.onEnterNode=function(e){if(this.isMovingForward||this.lastReachedNodeIndex==this.nodePath.length-1)for(var t in e.children)if(e.children[t]!=this.nodePath[this.nextNodeIndex()]){var i=this.caveSystem.getIndexOfRewardsOnNode(e.children[t]);for(var s in i)this.caveSystem.rewards[i[s]].activateOnPickup||(this.isActing=!0,this.claimReward(i[s]),isSimulating||this.setStatus(_("Pulling in nearby treasure")),this.wait(this.caveSystem.rewards[i[s]].collectionTime))}},magneticDrone.onExitNode=function(e){for(var t in this.isActing=!1,this.claimedRewards){var i=this.caveSystem.rewards[this.claimedRewards[t]];i.isClaimed=!1,i.locationNode=e}},drones[magneticDrone.id]=magneticDrone;var basicFlyingDrone=new BaseDrone;basicFlyingDrone.id=2,basicFlyingDrone.icon=airDrone1_icon,basicFlyingDrone.translatedName=_("AERIAL DRONE"),basicFlyingDrone.description=_("A basic flying drone. Avoids land based obstacles."),basicFlyingDrone.movementType=droneMovement.air,basicFlyingDrone.spritesheet=airDrone1_spritesheet,basicFlyingDrone.maxLevel=5,basicFlyingDrone.level=0,basicFlyingDrone.totalFuel=150,basicFlyingDrone.totalHealthLevels=[100,120,140,160,180,200],basicFlyingDrone.fuelUseLevels=[.3,.28,.26,.24,.22,.2],basicFlyingDrone.speedMultiplierLevels=[3,3.2,3.4,3.6,3.8,4],basicFlyingDrone.rewardCapacityLevels=[1,1,2,2,3,3],basicFlyingDrone.visionDistance=3,basicFlyingDrone.damagePerSecond=1,drones[basicFlyingDrone.id]=basicFlyingDrone;var healingDrone=new BaseDrone;function getDroneById(e){if(drones[e]&&drones[e].id==e)return drones[e];for(var t=0;t<drones.length;++t)if(drones[t].id==e)return drones[t];throw"Invalid drone ID"}healingDrone.id=3,healingDrone.icon=healingDrone_icon,healingDrone.translatedName=_("HEALING DRONE"),healingDrone.description=_("Gradually heals nearby drones after reaching its target location"),healingDrone.movementType=droneMovement.ground,healingDrone.spritesheet=healingDrone_spritesheet,healingDrone.maxLevel=5,healingDrone.level=0,healingDrone.totalFuel=200,healingDrone.totalHealthLevels=[20,30,40,50,60,70],healingDrone.fuelUseLevels=[.7,.65,.6,.55,.5,.45],healingDrone.speedMultiplierLevels=[6,6.2,6.4,6.6,6.8,7],healingDrone.rewardCapacityLevels=[0,0,0,0,0,0],healingDrone.visionDistance=1,healingDrone.damagePerSecond=1,healingDrone.healingPerSecond=8,drones[healingDrone.id]=healingDrone,healingDrone.specialUpdate=function(e){if(this.lastReachedNodeIndex==this.nodePath.length-1){this.isActing=!1;var t=this.nodePath[this.lastReachedNodeIndex];if(!this.hasInitializedValues){for(var i in isSimulating||this.setStatus(_("Healing nearby drones")),t.startEffect(this,"#5EB65D"),t.parent&&t.parent.startEffect(this,"#5EB65D"),t.children)t.children[i].startEffect(this,"#5EB65D");hasInitializedValues=!0}for(var i in this.caveSystem.activeDrones){var s=this.caveSystem.activeDrones[i],a=s.nodePath[s.lastReachedNodeIndex];(a==t||a==t.parent&&(0==s.progressToNextNode||s.isMovingForward)||t.children.includes(a)&&(0==s.progressToNextNode||!s.isMovingForward))&&s.currentHealth<s.totalHealth&&(this.isActing=!0,s.heal(this.healingPerSecond*e))}}},healingDrone.onEnterNode=function(e){this.lastReachedNodeIndex==this.nodePath.length-1&&(this.wait(1/0),isSimulating||this.setStatus(_("Healing nearby drones")))},drones[healingDrone.id]=healingDrone;