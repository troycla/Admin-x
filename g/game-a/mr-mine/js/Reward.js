class Reward{constructor(e){this.configuration=e}rollForRandomReward(){let e=0;return e=this.configuration.type==ChestType.basic?basicChestRewardRoller.rand(0,this.configuration.rangeMax-1):this.configuration.type==ChestType.gold?goldenChestRewardRoller.rand(0,this.configuration.rangeMax-1):blackChestRewardRoller.rand(0,this.configuration.rangeMax-1),this.grantReward(this.configuration,e)}grantReward(e,t){let r=this.getRewardText(e,t);return void 0!==r?r:e.defaultReward?e.defaultReward():void 0}getRewardText(e,t){if(e.rewards){let r=this.getQualifyingRewards(e,t);if(r.length)return this.grantReward(r[0],t)}else if(e.grantFunction)return e.grantFunction()}getQualifyingRewards(e,t){return e.rewards.filter((e=>!e.threshold||t<e.threshold)).filter((e=>!e.condition||e.condition())).sort(rewardSort)}}function depthMultiplier(){return Math.max(1e3,depth)/1e3}function rewardSort(e,t){var r=0;return e.threshold&&t.threshold&&(r=e.threshold-t.threshold),0==r&&(e.condition||t.condition)&&(r=e.condition?t.condition?0:-1:1),r}function grantTimelapse(e){var t=e;if(!isSimulating)return setTimeout((()=>timelapse(t)),120),t<60?_("{0} minute timelapse",parseFloat((t*STAT.timelapseDurationMultiplier()).toFixed(2))):_("{0} hour",parseFloat((t*STAT.timelapseDurationMultiplier()).toFixed(2))/60)+" "+_("timelapse")+" !!!!!!!";timelapse(t)}function grantSuperMinerSouls(e){return worldResources[SUPER_MINER_SOULS_INDEX].numOwned+=e,_("+{0} Super Miner Souls",e)}function grantSuperMiner(e){let t;return t=superMinerManager.currentSuperMiners.filter((e=>e.type==superMinerTypes.EGG)).length>=4?superMinerManager.getRandomBaseSuperMiner({rarity:e},{type:superMinerTypes.EGG}):superMinerManager.getRandomBaseSuperMiner({rarity:e}),superMinerManager.pendingSuperMiner=t.id,isSimulating||openUi(SuperMinerBlackWindow,null,t),0==chestService.totalBlackChestsOpened&&blackChestRewardRoller.srand(rand(0,9999999)),t.name}function grantMoney(e,t,r=!0,n){let i=basicChestRewardRoller.rand(e,t);var l=0;if((l=r?valueOfMineralsPerSecond().multiply(STAT.chestMoneyMultiplier()).multiply(60*i):valueOfMineralsPerSecond().multiply(STAT.chestMoneyMultiplier()/STAT.minerSpeedMultiplier()).multiply(60*i))>0)return addMoney(l),trackEvent_GainedMoney(l,n),chestService.totalMoneyFromChests+=l,"$"+beautifynum(l)}function grantBlueprint(e,t){let r=getUnownedBlueprints(1).filter((r=>r.id>=e&&r.id<=t));if(r.length){let e=r[goldenChestRewardRoller.rand(0,r.length-1)];return learnBlueprint(1,e.id),_("Blueprint For {0}",e.name)}}function grantMineral(e,t){let r=grantMineralsForHour(e,t,!1);if(r.amount>0)return r.name+" x "+beautifynum(r.amount)}function grantKmDepth(e){return addDepth(e),_("+{0}km",e)+" "+_("Depth")}function grantOil(e){if(depth>303)return worldResources[OIL_INDEX].numOwned+=e,e+" "+_("oil")+"!!"}function grantRareScientist(){if(!isActiveScientistsFull()){let e=unlockUncommonOrRarerScientist();if(e.success)return hasUnlockedScientists=1,_("Rare Scientist: {0}",e.reason)}}function grantRandomScientist(){let e=unlockRandomScientist();if(e.success)return hasUnlockedScientists=1,savegame(),_("Scientist: {0}",e.reason)}function grantSingleBuildingMaterial(){return worldResources[BUILDING_MATERIALS_INDEX].numOwned++,_("{0} x Building Materials!",1)}function grantTenBuildingMaterials(){return worldResources[BUILDING_MATERIALS_INDEX].numOwned+=10,_("{0} x Building Materials!",10)}function grantTwentyBuildingMaterials(){return worldResources[BUILDING_MATERIALS_INDEX].numOwned+=20,_("{0} x Building Materials!",20)}function grantFiftyBuildingMaterials(){return worldResources[BUILDING_MATERIALS_INDEX].numOwned+=50,_("{0} x Building Materials!",50)}function grantEquipment(e){if(depth>=300&&!hasEquip(e))return getEquip(e),_("Equip {0}",weaponStats[e].translatedName)+" "+"!".repeat(1+Math.ceil(e/2))}function grantTickets(e){return tickets+=e,e+" "+_("tickets")+"!!!!"}function grantStaticBuff(){let e=buffs.getChestAndTradeBuffs()[basicChestRewardRoller.rand(0,buffs.getChestAndTradeBuffs().length-1)].id,t=buffs.getStaticBuffById(e);for(var r=0;!t.canStartFunction()&&r<20;)e=buffs.getChestAndTradeBuffs()[basicChestRewardRoller.rand(0,buffs.getChestAndTradeBuffs().length-1)].id,t=buffs.getStaticBuffById(e),r++;return r>=20&&console.warn("Buff run was not a buff that was supposed to be usable: BuffIndex "+e),6!=e?buffs.startBuff(e,1200,"Chest",50):buffs.startBuff(e,30,"Chest"),_("a buff: {0}!",t.name)}function getRelativeRollChanceBasedOnLevelDifference(e){return e<1?2+Math.pow(Math.abs(e),2):1-getStandardDeviationPercent(e)}function getAverageOfTwoHighestLevelEquips(){var e=[drillState.drill().level,drillState.engine().level,drillState.fan().level,drillState.cargo().level];return e.sort((function(e,t){return t-e})),(e[0]+e[1])/2}function rollForDrillBlueprint(){var e=500/(depth+1);if(goldenChestRewardRoller.randFloat()>e)return!1;for(var t=sortBlueprintsByEquipLevelInAscendingOrder(getDiscoverableBlueprintsAboveLevelEquippedForEachType()),r=0,n=0;n<t.length;n++){r+=getRelativeRollChanceBasedOnLevelDifference(getDrillEquipById(t[n].craftedItem.item.id).level-getAverageOfTwoHighestLevelEquips())}return goldenChestRewardRoller.randFloat()<=r}function grantAcceptableDrillBlueprint(){console.log("Attempting to grant");for(var e=sortBlueprintsByEquipLevelInAscendingOrder(getDiscoverableBlueprintsAboveLevelEquippedForEachType()),t=[],r=0,n=0;n<e.length;n++){var i=getRelativeRollChanceBasedOnLevelDifference(getDrillEquipById(e[n].craftedItem.item.id).level-getAverageOfTwoHighestLevelEquips());r+=i,t.push(i)}var l=goldenChestRewardRoller.randFloat()*r;for(n=0;n<t.length;n++)if((l-=t[n])<=0)return learnBlueprint(1,e[n].id),_("Blueprint For {0}",e[n].name);console.log("Couldn't find blueprint. Roll: "+l+" Chances: "+t.toString())}function isCandidateForFirstChestBlueprint(){var e=13==Math.max(drillState.drill().level,drillState.engine().level,drillState.fan().level,drillState.cargo().level),t=filterBlueprintsByCategory(getKnownBlueprints(),1),r=(t=filterBlueprints(t,(function(e){return e.shopSubcategory==_("Discovered")}))).length>0;return e&&!r}function needsBuildingMaterials(){var e=0;return structures.forEach((t=>{var r=getBlueprintById(3,t.id);t.level!=t.maxLevel&&null!=r.levels[t.level].ingredients&&r.levels[t.level].ingredients.forEach((t=>{t.item.id==BUILDING_MATERIALS_INDEX&&worldResources[BUILDING_MATERIALS_INDEX].numOwned<t.quantity&&(e+=t.quantity)}))})),(e-=worldResources[BUILDING_MATERIALS_INDEX].numOwned)>0}